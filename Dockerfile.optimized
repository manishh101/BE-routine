# Lightweight production build for faster deployment
FROM node:20-alpine AS builder

# Install essential build dependencies only
RUN apk add --no-cache python3 make g++

# Set working directory
WORKDIR /app

# Copy package files first for better caching
COPY package*.json ./
COPY frontend/package*.json ./frontend/
COPY backend/package*.json ./backend/

# Install dependencies
WORKDIR /app/frontend
RUN npm ci --only=production --no-audit --no-fund

WORKDIR /app/backend
RUN npm ci --only=production --no-audit --no-fund

# Copy source code
WORKDIR /app
COPY frontend/ ./frontend/
COPY backend/ ./backend/

# Build frontend
WORKDIR /app/frontend
RUN npm run build

# Production stage
FROM node:20-alpine AS production

# Install runtime dependencies only
RUN apk add --no-cache \
    chromium \
    ca-certificates && \
    addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

# Set Puppeteer to use system Chromium
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
ENV PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser
ENV NODE_ENV=production
ENV PORT=7102

WORKDIR /app

# Copy backend and dependencies from builder
COPY --from=builder /app/backend/ ./
COPY --from=builder /app/frontend/dist ./public

# Change ownership
RUN chown -R nextjs:nodejs /app
USER nextjs

EXPOSE 7102

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD node -e "require('http').get('http://localhost:7102/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"

CMD ["npm", "start"]
